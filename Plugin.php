<?php namespace iAmirNet\IRPost;

use App;
use Auth;
use Azarinweb\Minimall\FormWidgets\Price;
use Azarinweb\Minimall\Models\Cart;
use Azarinweb\Minimall\Models\ShippingMethod;
use Event;
use Yaml;
use File;

use System\Classes\PluginBase;

use Azarinweb\Location\Controllers\Locations as LocationsController;
use Azarinweb\Location\Models\State as StateModel;

use iAmirNet\IRPost\Models\City;
use iAmirNet\IRPost\Models\IRPostSettings;

use Azarinweb\Minimall\Controllers\ShippingMethods as ShippingMethodsController;
use Azarinweb\Minimall\Models\ShippingMethod as ShippingMethodModel;

use iAmirNet\IRPost\Updates\CreateCitiesTable;
use iAmirNet\IRPost\Updates\ShippingAddIRPostField;

require_once "updates/create_cities_table.php";
require_once "updates/shipping_add_irpost_field.php";

class Plugin extends PluginBase
{
    /**
     * @var boolean Determine if this plugin should have elevated privileges.
     */
    public $elevated = true;

    public function pluginDetails()
    {
        return [
            'name'        => 'iamirnet.irpost::lang.plugin.name',
            'description' => 'iamirnet.irpost::lang.plugin.description',
            'author'      => 'iamirnet',
            'icon'        => 'icon-user',
            'homepage'    => 'https://iAmir.Net'
        ];
    }

    public function boot()
    {
        $this->extendModels();
        $this->extendControllers();
        (new CreateCitiesTable())->up();
        (new ShippingAddIRPostField())->up();
    }

    public function register()
    {
        parent::register(); // TODO: Change the autogenerated stub
    }

    public function registerPermissions()
    {
        return [
            'iamirnet.irpost.access_irpost' => [
                'tab'   => 'iamirnet.irpost::lang.plugin.tab',
                'label' => 'iamirnet.irpost::lang.plugin.access_irpost'
            ],
        ];
    }

    public function registerSettings()
    {
        return [
            'settings' => [
                'label'       => 'iamirnet.irpost::lang.irpost.title',
                'description' => 'iamirnet.irpost::lang.irpost.description',
                'category'    => 'iamirnet.minimall::lang.settings.shipping.title',
                'icon'        => 'icon-credit-card',
                'class'       => IRPostSettings::class,
                'order'       => 800,
                'permissions' => ['iamirnet.irpost.access_irpost']
            ]
        ];
    }
    protected function extendModels()
    {
        /*StateModel::extend(function(StateModel $model) {
            $model->setRelation('cities', $model->hasMany(City::class));
        });*/
        ShippingMethodModel::extend(function($model) {
            $model->addFillable([
                'irpost_type',
                'irpost_free',
            ]);
        });
    }

    protected function extendControllers()
    {
        ShippingMethodsController::extendFormFields(function($widget) {
            if (!$widget->model instanceof ShippingMethodModel) return;
            $configFile = plugins_path('iamirnet/irpost/config/shipping_extra_fields.yaml');
            $config = Yaml::parse(File::get($configFile));
            $widget->addTabFields($config);
        });
        LocationsController::extendFormFields(function($widget) {
            if (!$widget->model instanceof StateModel) return;
            $configFile = plugins_path('iamirnet/irpost/config/state_extra_fields.yaml');
            $config = Yaml::parse(File::get($configFile));
            $widget->addTabFields($config);
        });
        LocationsController::extend(function(LocationsController $self) {
            $config = $self->makeConfig('$/iamirnet/irpost/models/city/fields.yaml');
            $config->alias = 'cityForm';
            $config->arrayName = 'City';
            $config->model = post('record_id') ? City::find(post('record_id')) : new City();
            if (post('record_id')) {
                foreach ([500, 1000,2000, 'up'] as $type) {
                    $config->model->{'irpost_pishtaz' . $type} = $config->model->irpostPishtaz(null, $type);
                    $config->model->{'irpost_custom' . $type} = $config->model->irpostCustom(null, $type);
                }
            }
            $widget = $self->makeWidget('Backend\Widgets\Form', $config);
            $widget->bindToController();
            $self->addDynamicProperty('itemFormWidget', $widget);
            $self->addDynamicMethod('onLoadCreateCityForm', function () use ($self) {
                $self->vars['cityFormWidget'] = $self->itemFormWidget;
                $self->vars['stateId'] = post('manage_id');
                $self->vars['recordId'] = post('record_id');
                $self->vars['title'] = trans('iamirnet.irpost::lang.locations.state.cities.' . (post('record_id') ? 'edit' :'create'));
                return $self->makePartial('$/iamirnet/irpost/config/_city_create_form.htm');
            });
            $self->addDynamicMethod('getStateModel', function () use ($self) {
                $manageId = post('manage_id');
                $state = $manageId
                    ? StateModel::find($manageId)
                    : new StateModel();
                return $state;
            });
            $self->addDynamicMethod('onCreateCity', function () use ($self) {
                $data = $self->itemFormWidget->getSaveData();
                if (post('record_id')) {
                    $city = City::find(post('record_id'));
                    $city->update($data);
                }else{
                    $state = $self->getStateModel();
                    $state->cities()->create($data);
                }
                return $self->refreshStateCityList();
            });
            $self->addDynamicMethod('onDeleteCity', function () use ($self) {
                $recordId = post('record_id');
                $model = City::find($recordId);
                $model->delete();
                return $self->refreshStateCityList();
            });
            $self->addDynamicMethod('refreshStateCityList', function () use ($self) {
                $items = $self->getStateModel()
                    ->cities()
                    ->withDeferred($self->itemFormWidget->getSessionKey())
                    ->get()
                ;
                $self->vars['cities'] = $items;
                return ['#cityList' => $self->makePartial('$/iamirnet/irpost/config/_cities_list.htm')];
            });
        });
    }
}
